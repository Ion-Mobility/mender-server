
include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-python3-format.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-docker-build.yml'

stages:
  - test
  - build
  - publish

variables:
  LICENSE_HEADERS_IGNORE_FILES_REGEXP: '\./extra/gitdm.*'

test:check-commits:
  except:
    refs:
      - /^(master|[0-9]+\.[0-9]+\.x)$/
    variables:
      - $RUN_TESTS_STAGING == "true"

test:check-python3-formatting:
  except:
    refs:
      - /^(master|[0-9]+\.[0-9]+\.x)$/
    variables:
      - $RUN_TESTS_STAGING == "true"

test:extra-tools:changelog-generator:
  image: "python:3"
  stage: test

  except:
    variables:
      - $RUN_TESTS_STAGING == "true"

  before_script:
    # Rename the branch we're on, so that it's not in the way for the
    # subsequent fetch. It's ok if this fails, it just means we're not on any
    # branch.
    - git branch -m temp-branch || true
    # Set up git identity
    - git config --global user.name "Northern.tech" && git config --global user.email "info@northern.tech"

  script:
    # Check changelog-generator test.
    - ( cd extra/changelog-generator && ./test-changelog-generator )

test:extra-tools:release-tool:
  image: "python:3"
  stage: test

  except:
    variables:
      - $RUN_TESTS_STAGING == "true"

  before_script:
    - pip install pytest pyyaml
    # Add github remote for tests using --integration-versions-including
    - git remote add github https://github.com/mendersoftware/integration.git
    - git fetch github
    # Fetch master branch for tests using --in-integration-version
    - git fetch origin master:master
    - git fetch origin --tags
    - git submodule update --init --recursive

  script:
    # Run release-tool unit tests.
    - python3 -m pytest extra/test_release_tool.py
    - git config --global mailmap.file $(pwd)/extra/gitdm/mailmap
    - python3 -m pytest extra/test_statistics_generator.py

test:docs:
  image: tiangolo/docker-with-compose
  services:
    - docker:19.03.5-dind
  except:
    variables:
      - $RUN_TESTS_STAGING == "true"

  before_script:
    - apk add bash git openssl pwgen python3 jq
    - git config --global user.name "user"
    - git config --global user.email "user@example.com"
    - git clone --depth=1 https://github.com/mendersoftware/mender-docs.git mender-docs

  script:
    - cd mender-docs
    - env TEST_OPEN_SOURCE=1 ./test_docs.py 07.Server-installation/03.Production-installation/docs.md
    - if [ -n "$REGISTRY_MENDER_IO_PASSWORD" ]; then
        docker login -u ntadm_menderci -p "$REGISTRY_MENDER_IO_PASSWORD" registry.mender.io;
      fi
    - if [ -n "$REGISTRY_MENDER_IO_PASSWORD" ]; then
        env TEST_ENTERPRISE=1 ./test_docs.py 07.Server-installation/03.Production-installation/docs.md;
      fi
    - if [ -n "$REGISTRY_MENDER_IO_PASSWORD" ]; then
        env TEST_ENTERPRISE=1 ./test_docs.py 07.Server-installation/03.Production-installation/01.Upgrading-from-OS-to-Enterprise/docs.md;
      fi

test:staging:backend-tests:
  image: debian:buster
  stage: test
  timeout: 4h
  only:
    variables:
      - $RUN_TESTS_STAGING == "true"

  services:
    - docker:dind

  variables:
    K8S: "staging"
    AWS_ACCESS_KEY_ID: $CI_JOBS_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $CI_JOBS_AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: $CI_JOBS_AWS_REGION
    AWS_EKS_CLUSTER_NAME: $CI_JOBS_AWS_EKS_CLUSTER_NAME
    GATEWAY_HOSTNAME: "staging.hosted.mender.io"
    DOCKER_HOST: tcp://docker:2375

  before_script:
    - apt update
    - apt install -yyq curl gnupg
    # Install docker
    - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
    - apt-key fingerprint 0EBFCD88
    - echo "deb [arch=amd64] https://download.docker.com/linux/debian buster stable" >> /etc/apt/sources.list
    - apt update
    - apt install -yyq docker-ce docker-ce-cli containerd.io
    # Install docker-compose
    - curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/bin/docker-compose
    - chmod 775 /usr/bin/docker-compose
    #Â Install python dependencies
    - apt install -yyq python3-yaml
    # Export AWS keys, as group takes precedence over yaml specified ones
    # See https://docs.gitlab.com/ee/ci/variables/#priority-of-cicd-variables
    - export AWS_ACCESS_KEY_ID=$CI_JOBS_AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$CI_JOBS_AWS_SECRET_ACCESS_KEY

  script:
    - cd backend-tests
    - ./run -s enterprise

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - backend-tests/acceptance.*
      - backend-tests/results_backend_integration_*.xml
      - backend-tests/report_backend_integration_*.html
    reports:
      junit: backend-tests/results_backend_integration_*.xml

build:docker:
  variables:
    DOCKER_REPOSITORY: mendersoftware/mender-client-docker-addons
    DOCKER_DIR: extra/mender-client-docker-addons

publish:image:
  variables:
    DOCKER_REPOSITORY: mendersoftware/mender-client-docker-addons
    DOCKER_DIR: extra/mender-client-docker-addons

publish:image:mender:
  variables:
    DOCKER_REPOSITORY: mendersoftware/mender-client-docker-addons
    DOCKER_DIR: extra/mender-client-docker-addons

trigger:saas:sync-staging-component:
  rules:
    - when: never

publish:image:saas:
  rules:
    - when: never
